/*
   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/



/****************************************************************************
*
* This file is for Classic Bluetooth device and service discovery Demo.
*
****************************************************************************/

#include <stdint.h>
#include <string.h>
#include "HardwareSerial.h"
#include "esp_bt.h"
#include "esp_bt_main.h"
#include "esp_bt_device.h"
#include "esp_gap_bt_api.h"

typedef enum {
    APP_GAP_STATE_IDLE = 0,
    APP_GAP_STATE_DEVICE_DISCOVERING,
    APP_GAP_STATE_DEVICE_DISCOVER_COMPLETE,
    APP_GAP_STATE_SERVICE_DISCOVERING,
    APP_GAP_STATE_SERVICE_DISCOVER_COMPLETE,
} app_gap_state_t;

typedef struct {
    bool dev_found;
    uint8_t bdname_len;
    uint8_t eir_len;
    uint8_t rssi;
    uint32_t cod;
    uint8_t eir[ESP_BT_GAP_EIR_DATA_LEN];
    uint8_t bdname[ESP_BT_GAP_MAX_BDNAME_LEN + 1];
    esp_bd_addr_t bda;
    app_gap_state_t state;
} app_gap_cb_t;

static app_gap_cb_t m_dev_info;

// Giant list of all seen devices.
char btSsid[10000];
uint8_t SCAN_TIME=1;

static app_gap_cb_t m_dev_info;
app_gap_state_t BTCisStarted = APP_GAP_STATE_IDLE;

app_gap_state_t getStatus(void) {
  return BTCisStarted;
}

static char *bda2str(esp_bd_addr_t bda, char *str, size_t size)
{
    if (bda == NULL || str == NULL || size < 18) {
        return NULL;
    }

    uint8_t *p = bda;
    sprintf(str, "%02x:%02x:%02x:%02x:%02x:%02x",
            p[0], p[1], p[2], p[3], p[4], p[5]);
    return str;
}

static void update_device_info(esp_bt_gap_cb_param_t *param)
{
    char bda_str[18];
    uint32_t cod = 0;
    int32_t rssi = -129; /* invalid value */
    esp_bt_gap_dev_prop_t *p;

    bda2str(param->disc_res.bda, bda_str, 18);
    Serial.printf("Found device with %d props\n", param->disc_res.num_prop);
    for (int i = 0; i < param->disc_res.num_prop; i++) {
        p = param->disc_res.prop + i;
        Serial.println((uint8_t)p->type);
        switch (p->type) {
        case ESP_BT_GAP_DEV_PROP_COD:
            cod = *(uint32_t *)(p->val);
            break;
        case ESP_BT_GAP_DEV_PROP_RSSI:
            rssi = *(int8_t *)(p->val);
            break;
        case ESP_BT_GAP_DEV_PROP_EIR:
            
        case ESP_BT_GAP_DEV_PROP_BDNAME:
        default:
            break;
        }
    }
    //Add the information to the char array
    char *s;

    // this will just output the length which is to expect
    int length = snprintf( NULL, 0, "%d", rssi );

    char* rssiValueAsString = (char*)malloc( length + 1 );// one more for 0-terminator
    snprintf( rssiValueAsString, length + 1, "%d", rssi );

    s = strstr(btSsid, bda_str);      // Make sure we haven't alredy seen this device
    if (s == NULL)                     // if successful then s now points at "hassasin"
    {
        strcat(btSsid, bda_str);
        strcat(btSsid, ":");
        strcat(btSsid, rssiValueAsString);
        strcat(btSsid, ";\n");
    }
}

void bt_app_gap_cb(esp_bt_gap_cb_event_t event, esp_bt_gap_cb_param_t *param)
{
    app_gap_cb_t *p_dev = &m_dev_info;

    switch (event) {
      case ESP_BT_GAP_DISC_RES_EVT: {
          update_device_info(param);
          break;
      }
      case ESP_BT_GAP_DISC_STATE_CHANGED_EVT: {
          if (param->disc_st_chg.state == ESP_BT_GAP_DISCOVERY_STOPPED && BTCisStarted == APP_GAP_STATE_DEVICE_DISCOVERING) {
              Serial.printf("Devices found: \n%s", btSsid);
              Serial.println("Device discovery stopped.");
  
              //Release memory
              esp_bt_gap_cancel_discovery();
              esp_bt_controller_mem_release(ESP_BT_MODE_BTDM);
  
              //Clear the char array
              memset(btSsid, 0, sizeof(btSsid));
  
              /* Start another discovery */
              //esp_bt_gap_start_discovery(ESP_BT_INQ_MODE_GENERAL_INQUIRY, 1, 0);
              BTCisStarted = APP_GAP_STATE_IDLE;
          } else if (param->disc_st_chg.state == ESP_BT_GAP_DISCOVERY_STARTED) {
              Serial.println("Discovery started.");
              BTCisStarted = APP_GAP_STATE_DEVICE_DISCOVERING;
          }
          break;
      }
      case ESP_BT_GAP_RMT_SRVC_REC_EVT:
      default: {
          Serial.printf("event: %d\n", event);
          break;
      }
    }
    return;
}

void bt_app_gap_start_up(uint8_t scan_time, void (*cb_scan_done)(void *))
{
  SCAN_TIME=scan_time;
  if (! BTCisStarted){
    /* register GAP callback function */
    esp_bt_gap_register_callback(bt_app_gap_cb);

    /* inititialize device information and status */
    app_gap_cb_t *p_dev = &m_dev_info;
    memset(p_dev, 0, sizeof(app_gap_cb_t));

    /* Set Scanning Mode */
    esp_bt_gap_set_scan_mode(ESP_BT_SCAN_MODE_CONNECTABLE_DISCOVERABLE);
    
    /* start to discover nearby Bluetooth devices */
    p_dev->state = APP_GAP_STATE_DEVICE_DISCOVERING;
    esp_bt_gap_start_discovery(ESP_BT_INQ_MODE_GENERAL_INQUIRY, SCAN_TIME, 0);
  }
}
